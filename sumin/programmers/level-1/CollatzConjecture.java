/**
💡프로그래머스 - 콜라츠 추측
https://school.programmers.co.kr/learn/courses/30/lessons/12943

✅문제 설명
1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다. 
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다.
위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

✅제한 조건
입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.

✅입출력 예
n		result
6	 	 8
16	 	 4
626331	-1

※ 공지 - 2022년 6월 10일 다음과 같이 지문이 일부 수정되었습니다.
주어진 수가 1인 경우에 대한 조건 추가
*/


class Solution {
    public int solution(long num) {

		if( num == 1 ) {
			return 0;
		}
		
		for( int i=1; i<=500; i++ ) {	
			
			if( num % 2 == 0 ) {
				num = num / 2;
			} else {
				num = (num * 3) + 1;
			}
			
			if( num == 1 ) {
				return i;
			}
		}
		
        return -1;
    }
}

/**
✅잘한 점
 - 로직 정확하게 짬 

❗아쉬운 점
 - 삼항연산자를 썼으면 좀 더 간결하고 가독성이 좋았을듯함
 - for문을 0부터 시작했다면 num이 1일 때 0을  return하는 조건문을 따로 작성하지 않아도 됐음
	
}

🔁복습 포인트
 - 오버플로우 조심 ! ! !
 - 큰 수가 올 때 항상 오버플로우가 날 수 있다는거를 고려하여 타입을 정해야 함
   num이 처음에 int로 주어졌지만, long로 변경이 필요했음
	
	class Solution {
    public int solution(long num) {

        for( int i=0; i<500; i++ ) {
            if (num == 1) return i;
            num = (num % 2 == 0) ? num / 2 : num * 3 + 1;
        }
        return -1;
    }

*/
